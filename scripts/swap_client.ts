import axios from 'axios';
import { SwapResponse, SwapParam } from '../src/types';
import { formatUnits, parseUnits } from '../src/utils';
import { tokens } from '../src/tokens';
import { logger } from '../src/logging';
import { ethers } from 'ethers';

import dotenv from 'dotenv';
dotenv.config();

const url = `http://${process.env.SERVER_IP}:${process.env.SERVER_PORT}/swap`;

async function testUniswapV3() {
  const calldata =
    '0xce8c4316000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000596c17a9c459e7bea000000000000000000000000000000000000000000000000000000000626a82fc00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000400000000000000000000000003f911aedc25c770e701b8f563e8102cfacd62c000000000000000000000000003f911aedc25c770e701b8f563e8102cfacd62c00000000000000000000000002fa31d2ac017869998f9574bac76094a8110cf7c000000000000000000000000c837bbea8c7b0cac0e8928f797ceb04a34c9c06e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000003f911aedc25c770e701b8f563e8102cfacd62c000000000000000000000000003f911aedc25c770e701b8f563e8102cfacd62c00000000000000000000000002fa31d2ac017869998f9574bac76094a8110cf7c000000000000000000000000d75ea151a61d06868e31f8988d28dfe5e9df57b400000000000000000000000000000000000000000000000000000000000000048000000000000000000009c45ab53ee1d50eef2c1dd3d5402789cd27bb52c1bb8000000000000000000009c41353fe67fff8f376762b7034dc9066f0be15a7238000000000000000000009c4c697051d1c6296c24ae3bcef39aca743861d9a818000000000000000000009c4d75ea151a61d06868e31f8988d28dfe5e9df57b4000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000003f2c696b8ff754259046100000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000003f1742da390c4547ae73200000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae900000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae9000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
  const inputToken = tokens.WETH.address; // WETH
  const outputToken = tokens.AAVE.address; //AAVE
  const ethValue = ethers.utils.parseEther('0').toString();
  const inputAmount = ethers.utils.parseUnits('100', 18).toString();

  const query: SwapParam = {
    calldata,
    inputToken,
    outputToken,
    inputAmount,
    ethValue,
  };

  try {
    const res = await axios.get(url, { params: query });
    const quoteRes = res.data as SwapResponse;
    logger.info(formatUnits(quoteRes.outputAmount, 6));
  } catch (error: any) {
    logger.fatal(`${error.response.data.error}`);
  }
}

async function main() {
  await testUniswapV3();
}

main().catch(console.error);
